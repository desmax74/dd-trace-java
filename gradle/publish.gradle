apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * Proper publishing requires the following environment variables:
 * SONATYPE_USERNAME
 * SONATYPE_PASSWORD
 * GPG_PRIVATE_KEY
 * GPG_PASSWORD
 */

// TODO: Maybe add https://github.com/marcphilipp/nexus-publish-plugin

apply from: "$rootDir/gradle/version.gradle"
apply from: "$rootDir/gradle/maven-pom.gradle"

def isSnapshot = version.endsWith("-SNAPSHOT")
def isCI = System.getenv("CI") != null
def circleTag = System.getenv("CIRCLE_TAG")
def gitlabTag = System.getenv("CI_COMMIT_TAG")
def isCIandTagged = isCI && (circleTag || gitlabTag)
assert isSnapshot != isCIandTagged

// define in ~/.gradle/gradle.properties to override for testing
def forceLocal = project.hasProperty('forceLocal') && forceLocal
assert !forceLocal || forceLocal != isCI

publishing {
  repositories {
    maven {
      def host = forceLocal ? 'http://localhost:8081/nexus' : 'https://oss.sonatype.org'
      def repo = isSnapshot ? 'snapshots' : 'releases'
      url = "$host/content/repositories/$repo"
      credentials {
        if (forceLocal && !isCI) {
          // For testing use with https://hub.docker.com/r/sonatype/nexus
          // docker run --rm -d -p 8081:8081 --name nexus sonatype/nexus
          username "admin"
          password "admin123"
        } else {
          username System.getenv("SONATYPE_USERNAME")
          password System.getenv("SONATYPE_PASSWORD")
        }
      }
    }
  }

  publications {
    maven(MavenPublication) {
      if (project.plugins.hasPlugin('com.github.johnrengelman.shadow')) {
        project.shadow.component(it)
        // Required by Maven Central:
        artifact sourcesJar
        artifact javadocJar
      } else {
        from components.java
      }
    }
  }
}

if (project.plugins.hasPlugin('com.github.johnrengelman.shadow')) {
  // Disable gradle module metadata to avoid publishing contradictory info
  // until we've updated to https://github.com/johnrengelman/shadow/releases/tag/6.0.0
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }
}

signing {
  useInMemoryPgpKeys(System.getenv("GPG_PRIVATE_KEY"), System.getenv("GPG_PASSWORD"))
  sign publishing.publications.maven
}

tasks.withType(Sign).configureEach {
  // Only sign in CI
  onlyIf { isCI }
}

/**
 * State assertions below...
 */

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
  if (taskGraph.hasTask(publishMavenPublicationToMavenRepository) || taskGraph.hasTask(publishMavenPublicationToMavenLocal)) {
    assert project.findProperty("removeJarVersionNumbers") != true
    if (taskGraph.hasTask(publishMavenPublicationToMavenRepository)) {
      assert System.getenv("SONATYPE_USERNAME") != null
      assert System.getenv("SONATYPE_PASSWORD") != null
      if (isCI) {
        assert System.getenv("GPG_PRIVATE_KEY") != null
        assert System.getenv("GPG_PASSWORD") != null
      }
    }
  }
}

afterEvaluate {
  assert description: "Project $project.path is published, must have a description"
}

configurations {
  configurations {
    all {
      incoming.afterResolve {
        dependencies.withType(ModuleDependency) { dep ->
          excludeRules.each {
            if ([it.group, it.module].any { it == null }) {
              throw new InvalidUserDataException("Partial exclude for dependency '$dep.group:$dep.name:$dep.version' of $project: [group: $it.group, module: $it.module]\n\nExcludes must specify both group and module and neither can be '*'.")
            }
          }
        }
      }
    }
  }
}

tasks.withType(AbstractPublishToMaven).matching { !it.name.toLowerCase().contains("install") }.configureEach {
  rootProject.subprojects {
    mustRunAfter tasks.matching { it instanceof VerificationTask }
  }
}
